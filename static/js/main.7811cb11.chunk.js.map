{"version":3,"sources":["Components/PostsFromServer.js","Components/UsersFromServer.js","Components/CommentsFromServer.js","Components/Store/dataLoadingReducer.js","Components/Store/queryReducer.js","Components/Store/index.js","Components/User.js","Components/Comment.js","Components/CommentList.js","Components/Post.js","Components/PostList.js","App.js","Components/Function.js","index.js"],"names":["postsFromServer","response","regenerator_default","a","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","usersFromServer","commentsFromServer","initialState","posts","isLoaded","isLoading","hasError","dataLoadingReducer","state","arguments","length","undefined","action","type","Object","objectSpread2","queryReducer","query","reducer","createSelector","dataLoading","filter","_ref","title","body","toLowerCase","includes","combineReducers","store","createStore","applyMiddleware","thunk","User","name","email","address","react_default","createElement","className","concat","city","Comment","CommentList","list","map","item","Components_Comment","assign","key","id","Post","bolderText","user","comments","boldText","text","split","RegExp","part","i","react","Fragment","Components_User","Components_CommentList","PostList","result","post","Components_Post","App","data","_useState","useState","_useState2","slicedToArray","typicalPosts","setTypicalPosts","_useState3","_useState4","setPosts","_useState5","_useState6","isLoad","setLoad","_useState7","_useState8","setLoading","_useState9","_useState10","searchValue","setSearchValue","searchWithDelayTime","f","delay","timer","clearTimeout","_len","args","Array","_key","setTimeout","apply","delayTime","value","_ref3","placeholder","onChange","_ref4","target","slice","Components_PostList","searchResultValue","onClick","_ref2","postData","userData","commentData","Promise","all","find","userId","comment","postId","t0","disabled","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.7811cb11.chunk.js","sourcesContent":["const POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\n\nexport const postsFromServer = async() => {\n  const response = await fetch(POSTS_URL);\n\n  return response.json();\n};\n","const USERS_URL = 'https://jsonplaceholder.typicode.com/users';\n\nexport const usersFromServer = async() => {\n  const response = await fetch(USERS_URL);\n\n  return response.json();\n};\n","const COMMENTS_URL = 'https://jsonplaceholder.typicode.com/comments';\n\nexport const commentsFromServer = async() => {\n  const response = await fetch(COMMENTS_URL);\n\n  return response.json();\n};\n","import { postsFromServer } from '../PostsFromServer';\nimport { usersFromServer } from '../UsersFromServer';\nimport { commentsFromServer } from '../CommentsFromServer';\n\nconst LOADING_START = 'LOADING_START';\nconst LOADING_SUCCESS = 'LOADING_SUCCESS';\nconst LOADING_FAIL = 'LOADING_FAIL';\n\nexport const startDataLoading = () => ({ type: LOADING_START });\nexport const handleUsersLoadingFail = () => ({ type: LOADING_FAIL });\nexport const handleUsersLoadingSuccess = posts => ({\n  type: LOADING_SUCCESS,\n  posts,\n});\n\n// eslint-disable-next-line consistent-return\nexport const loadData = () => async(dispatch) => {\n  dispatch(startDataLoading());\n\n  try {\n    const [postsData, usersData, commentsData] = await Promise.all([\n      postsFromServer(),\n      usersFromServer(),\n      commentsFromServer(),\n    ]);\n\n    const allData = postsData.map(\n      post => ({\n        ...post,\n        user: usersData.find(\n          user => post.userId === user.id\n        ),\n        comments: commentsData.filter(\n          comment => post.id === comment.postId\n        ),\n      })\n    );\n\n    return dispatch(handleUsersLoadingSuccess(allData));\n  } catch (e) {\n    dispatch(handleUsersLoadingFail());\n  }\n};\n\nconst initialState = {\n  posts: [],\n  isLoaded: false,\n  isLoading: false,\n  hasError: false,\n};\n\nconst dataLoadingReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOADING_START:\n      return {\n        ...state,\n        isLoading: true,\n        hasError: false,\n      };\n\n    case LOADING_SUCCESS:\n      return {\n        ...state,\n        posts: action.posts,\n        isLoading: false,\n        isLoaded: true,\n      };\n\n    case LOADING_FAIL:\n      return {\n        ...state,\n        isLoading: false,\n        hasError: true,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default dataLoadingReducer;\n","const SET_QUERY = 'SET_QUERY';\n\nexport const setQuery = query => ({\n  type: SET_QUERY,\n  query,\n});\n\nconst queryReducer = (state = '', action) => {\n  switch (action.type) {\n    case SET_QUERY:\n      return action.query;\n\n    default:\n      return state;\n  }\n};\n\nexport default queryReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { createSelector } from 'reselect';\nimport thunk from 'redux-thunk';\n\nimport dataLoadingReducer from './dataLoadingReducer';\nimport queryReducer from './queryReducer';\n\nexport const getIsLoaded = state => state.dataLoading.isLoaded;\nexport const getIsLoading = state => state.dataLoading.isLoading;\nexport const getHasError = state => state.dataLoading.hasError;\nexport const getQuery = state => state.query;\nexport const getPosts = createSelector(\n  [\n    state => state.dataLoading.posts,\n    getQuery,\n  ],\n\n  (posts, query) => (\n    posts.filter(\n      ({ title, body }) => (title + body).toLowerCase().includes(query)\n    )\n  )\n);\n\nconst reducer = combineReducers({\n  dataLoading: dataLoadingReducer,\n  query: queryReducer,\n});\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// eslint-disable-next-line no-shadow\nconst User = ({ name, email, address }) => (\n  <div className=\"author\">\n    <h4>{`Name: ${name}`}</h4>\n    <p>{`Email: ${email}`}</p>\n    <p>{`City: ${address.city}`}</p>\n  </div>\n);\n\nUser.propTypes = {\n  name: PropTypes.string,\n  email: PropTypes.string,\n  address: PropTypes.shape({\n    city: PropTypes.string,\n  }),\n}.isRequired;\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Comment = ({ name, email, body }) => (\n  <div>\n    <h3>{`Comment: ${name}`}</h3>\n    <p>{body}</p>\n    <p>{email}</p>\n  </div>\n);\n\nComment.propTypes = {\n  name: PropTypes.string,\n  email: PropTypes.string,\n  body: PropTypes.string,\n}.isRequired;\n\nexport default Comment;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// eslint-disable-next-line no-shadow\nimport Comment from './Comment';\n\nconst CommentList = ({ list }) => (\n  <div className=\"comment__list\">\n    {list.map(\n      item => <Comment key={item.id} {...item} />\n    )}\n  </div>\n);\n\nCommentList.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.object\n  ),\n}.isRequired;\n\nexport default CommentList;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport User from './User';\nimport CommentList from './CommentList';\n\nconst Post = ({ bolderText, id, title, body, user, comments }) => {\n  const boldText = (text) => {\n    if (!bolderText) {\n      return text;\n    }\n\n    const article = text.split(new RegExp(`(${bolderText})`, 'gi'));\n\n    return article.map((part, i) => (\n      <Fragment key={`${part + i}`}>\n        {part.toLowerCase() === bolderText.toLowerCase()\n          ? <span>{part}</span>\n          : part}\n      </Fragment>\n    ));\n  };\n\n  return (\n    <section>\n      <>\n        <article>\n          <p className=\"post__id\">{`Post ${id}`}</p>\n          <h2>\n            {boldText(title)}\n          </h2>\n\n          <p>\n            {boldText(body)}\n          </p>\n        </article>\n\n        <User {...user} />\n      </>\n\n      <CommentList list={comments} />\n    </section>\n  );\n};\n\nPost.propTypes = {\n  bolderText: PropTypes.string,\n  id: PropTypes.number,\n  title: PropTypes.string,\n  body: PropTypes.string,\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    address: PropTypes.object,\n  }),\n  comments: PropTypes.arrayOf(\n    PropTypes.object\n  ),\n}.isRequired;\n\nexport default Post;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Post from './Post';\n\nconst PostList = ({ posts, result }) => (\n  <div>\n    {posts.map(\n      post => (\n        <Post\n          bolderText={result}\n          key={post.id}\n          {...post}\n        />\n      )\n    )}\n  </div>\n);\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object),\n  result: PropTypes.string,\n}.isRequired;\n\nexport default PostList;\n","import React, { useState } from 'react';\nimport './App.css';\nimport { postsFromServer } from './Components/PostsFromServer';\nimport { usersFromServer } from './Components/UsersFromServer';\nimport { commentsFromServer } from './Components/CommentsFromServer';\nimport { delayTime } from './Components/Function';\nimport PostList from './Components/PostList';\n\nconst App = () => {\n  const [typicalPosts, setTypicalPosts] = useState([]);\n  const [posts, setPosts] = useState([]);\n  const [isLoad, setLoad] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n\n  let data;\n\n  const loadData = async() => {\n    setLoading(true);\n\n    try {\n      const [postData, userData, commentData] = await Promise.all([\n        postsFromServer(),\n        usersFromServer(),\n        commentsFromServer(),\n      ]);\n\n      data = postData.map(\n        post => ({\n          ...post,\n          user: userData.find(\n            user => post.userId === user.id\n          ),\n          comments: commentData.filter(\n            comment => post.id === comment.postId\n          ),\n        })\n      );\n\n      setTypicalPosts(data);\n      setPosts(data);\n      setLoading(false);\n      setLoad(true);\n    } catch (e) {\n      setLoading(false);\n    }\n  };\n\n  const searchWithDelayTime = delayTime(value => setPosts(\n    typicalPosts.filter(\n      ({ title, body }) => (title + body).toLowerCase().includes(value)\n    )\n  ), 500);\n\n  const searchPosts = ({ target }) => {\n    const value = target.value.toLowerCase().slice(0, 37);\n\n    setSearchValue(value);\n    searchWithDelayTime(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of posts</h1>\n      {isLoad ? (\n        <>\n          <input\n            type=\"search\"\n            placeholder=\"Search\"\n            onChange={searchPosts}\n            value={searchValue}\n          />\n\n          <PostList\n            posts={posts}\n            searchResultValue={searchValue}\n          />\n        </>\n      ) : (\n        <button\n          type=\"button\"\n          onClick={loadData}\n          disabled={isLoading}\n        >\n          {isLoading ? 'Load...' : 'Load'}\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","export const delayTime = (f, delay) => {\n  let timer;\n\n  return (...args) => {\n    clearTimeout(timer);\n\n    timer = setTimeout(f, delay, ...args);\n  };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport store from './Components/Store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}